{"version":3,"sources":["main.js","webgl.js","objects/Boid.js","objects/Fish.js","objects/Grass.js","objects/Plane.js","objects/Plant.js","objects/Shark.js","objects/Skybox.js","objects/Sound.js","objects/Sphere.js"],"names":[],"mappingsjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.min.js","sourcesContent":["var webgl, gui, raycaster;\r\nvar mouse = new THREE.Vector2(), INTERSECTED;\r\n\r\n$(document).ready(init);\r\n\r\nfunction init(){\r\n\r\n    webgl = new Webgl(window.innerWidth, window.innerHeight);\r\n    $('.three').append(webgl.renderer.domElement);\r\n\r\n    gui = new dat.GUI();\r\n/*\r\n    gui.add(webgl.skyboxObject.scale, 'x').min(-10).max(10);\r\n    gui.add(webgl.skyboxObject.scale, 'y').min(-10).max(10);\r\n    gui.add(webgl.skyboxObject.scale, 'z').min(-10).max(10);\r\n*/\r\n    gui.add(webgl.planeObject.position, 'y').min(-100).max(200);\r\n    gui.add(webgl.planeObject.position, 'z').min(-300).max(100);\r\n    /*\r\n    gui.add(webgl.skyboxObject.position, 'y').min(-100).max(200);\r\n    gui.add(webgl.skyboxObject.position, 'z').min(-100).max(200);\r\n    */\r\n/*\r\n    gui.add(webgl.sharkObject.whiteEye.position, 'x').min(-50).max(50);\r\n    gui.add(webgl.sharkObject.whiteEye.position, 'y').min(-50).max(50);\r\n    gui.add(webgl.sharkObject.whiteEye.position, 'z').min(-50).max(50);\r\n*/\r\n    gui.close();\r\n\r\n    raycaster = new THREE.Raycaster();\r\n    document.addEventListener( 'mousemove', onDocumentMouseMove, false );\r\n    //document.addEventListener( 'mousedown', onDocumentMouseDown, false );\r\n\r\n    $(window).on('resize', resizeHandler);\r\n\r\n    animate();\r\n}\r\n\r\nfunction onDocumentMouseMove(event) {\r\n\r\n    event.preventDefault();\r\n\r\n    mouse.x =  (event.clientX / window.innerWidth) * 2 - 1;\r\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\r\n}\r\n/*\r\nfunction onDocumentMouseDown(event) {\r\n\r\n    event.preventDefault();\r\n\r\n    mouse.x =  (event.clientX / window.innerWidth) * 2 - 1;\r\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\r\n}\r\n*/\r\nfunction resizeHandler() {\r\n    webgl.resize(window.innerWidth, window.innerHeight);\r\n}\r\n\r\nfunction animate() {\r\n    requestAnimationFrame(animate);\r\n    webgl.render();\r\n}","var Webgl = (function(){\r\n\r\n    function Webgl(width, height){\r\n        // Basic three.js setup\r\n        this.scene = new THREE.Scene();\r\n        \r\n        this.camera = new THREE.PerspectiveCamera(50, width / height, 1, 10000);\r\n        //this.camera = new THREE.OrthographicCamera(width/-2, width/2, height/2, height/-2, 1, 1000);\r\n        this.camera.position.z = 500;\r\n\r\n        this.renderer = new THREE.WebGLRenderer();\r\n        this.renderer.setSize(width, height);\r\n        this.renderer.setClearColor(0x000000);\r\n\r\n        // Light\r\n        var light = new THREE.PointLight(0xFFFFFF, 1, 2000);\r\n        light.position.set(0, 300, -200);\r\n        this.scene.add(light);\r\n\r\n        // Grass\r\n        this.grassObject = new Grass(width, height);\r\n        this.grassObject.position.set(0, 0, 0);\r\n        this.scene.add(this.grassObject);\r\n\r\n        // Plane\r\n        this.planeObject = new Plane();\r\n        this.planeObject.position.set(0, 0, 0);\r\n        this.scene.add(this.planeObject);\r\n\r\n        // Fishes\r\n        \r\n        this.boidObject = new Boid(10);\r\n        this.boidObject.position.set(0, 0, 0);\r\n        this.scene.add(this.boidObject);\r\n        \r\n\r\n        // Plant\r\n    /*\r\n        for (var i = 0 ; i < 4 ; i++) {\r\n            this.plantObject = new Plant();\r\n            this.plantObject.position.set(0, 0, 0);\r\n            this.scene.add(this.plantObject);\r\n        };*/\r\n        \r\n\r\n        // Skybox\r\n    /*\r\n        this.skyboxObject = new Skybox();\r\n        this.skyboxObject.position.set(0, 0, 0);\r\n        //this.skyboxObject.scale.set(0, 0, 0);\r\n        this.scene.add(this.skyboxObject);\r\n*/\r\n        // Sound\r\n        this.soundObject = new Sound();\r\n\r\n        // Shark\r\n        /*\r\n        this.sharkObject = new Shark();\r\n        this.sharkObject.position.set(1000, 0, -1000);\r\n        this.scene.add(this.sharkObject);*/\r\n\r\n    }\r\n\r\n    Webgl.prototype.resize = function(width, height) {\r\n        this.camera.aspect = width / height;\r\n        this.camera.updateProjectionMatrix();\r\n        this.renderer.setSize(width, height);\r\n    };\r\n\r\n    Webgl.prototype.render = function() {\r\n        // MOUSE GESTURE\r\n        var vector = new THREE.Vector3(mouse.x, mouse.y, 1).unproject(this.camera);\r\n        raycaster.set(this.camera.position, vector.sub(this.camera.position).normalize());\r\n        var intersect = raycaster.intersectObject(this.scene.children[3], true);\r\n\r\n        if (intersect.length > 0) {\r\n/*\r\n            for (var i = 0; i < intersect.length; i++) {\r\n                this.boidObject.fleeMouse(vector, intersect[i].object.parent);\r\n            };\r\n*/\r\n            if (INTERSECTED != intersect[0].object) {\r\n                if (INTERSECTED) \r\n                    INTERSECTED.material.emissive.setHex(INTERSECTED.currentHex);\r\n\r\n                INTERSECTED = intersect[0].object;\r\n                INTERSECTED.currentHex = INTERSECTED.material.emissive.getHex();\r\n                INTERSECTED.material.emissive.setHex(0xFF6666);\r\n\r\n                this.boidObject.fleeMouse(vector, intersect[0].object.parent);\r\n            }\r\n        } \r\n        else {\r\n            if (INTERSECTED) \r\n                INTERSECTED.material.emissive.setHex(INTERSECTED.currentHex);\r\n\r\n            INTERSECTED = null;\r\n        }\r\n        // END MOUSE GESTURE\r\n\r\n        this.renderer.render(this.scene, this.camera);\r\n\r\n        this.grassObject.update();\r\n        this.boidObject.update();\r\n        //this.sharkObject.update();\r\n    };\r\n\r\n    return Webgl;\r\n\r\n})();","var Boid = (function(){\r\n\r\n    function Boid(nbFishes){\r\n        THREE.Object3D.call(this);\r\n\r\n        var fishes = [];\r\n\r\n        for (var i = 0 ; i < nbFishes ; i++) {\r\n\r\n          var fish = new Fish();\r\n          fish.position.set((Math.random()*800)-400, (Math.random()*200)-100, (Math.random()*200)-100);\r\n          fish.velocity = new THREE.Vector3(1, 1, 1);\r\n          fishes.push(fish);\r\n          this.add(fish);\r\n        };\r\n    }\r\n\r\n    Boid.prototype = new THREE.Object3D;\r\n    Boid.prototype.constructor = Boid;\r\n\r\n    Boid.prototype.update = function() {\r\n\r\n        for (var i = 0 ; i < this.children.length ; i++) {\r\n            this.moveWith(this.children, this.children[i], 100);\r\n            this.moveCloser(this.children, this.children[i], 100);                    \r\n            this.moveAway(this.children, this.children[i], 40); \r\n        }\r\n\r\n        for (var i = 0 ; i < this.children.length ; i++) {\r\n            this.children[i].update();\r\n            this.move(this.children[i]); \r\n        }\r\n    }\r\n\r\n    Boid.prototype.move = function(currentBoid) {\r\n        \r\n        currentBoid.position.x += currentBoid.velocity.x;\r\n        currentBoid.position.y += currentBoid.velocity.y;\r\n        currentBoid.position.z += currentBoid.velocity.z;\r\n\r\n        var width = 400;\r\n        var height = 100;\r\n        var depth = 100;\r\n        var border = 0;\r\n        \r\n        if(currentBoid.position.x <= -width + border || currentBoid.position.x >= width - border) {\r\n            currentBoid.position.x -= currentBoid.velocity.x;                   \r\n            currentBoid.position.x = Math.max(currentBoid.position.x, -width + border);\r\n            currentBoid.position.x = Math.min(currentBoid.position.x,  width - border);\r\n            currentBoid.velocity.x = -currentBoid.velocity.x;\r\n            currentBoid.position.x += currentBoid.velocity.x;\r\n        }\r\n        if(currentBoid.position.y <= -height + border || currentBoid.position.y >= height - border) {\r\n            currentBoid.position.y -= currentBoid.velocity.y;\r\n            currentBoid.position.y = Math.max(currentBoid.position.y, -height + border);\r\n            currentBoid.position.y = Math.min(currentBoid.position.y,  height - border);\r\n            currentBoid.velocity.y = -currentBoid.velocity.y;\r\n            currentBoid.position.y += currentBoid.velocity.y;\r\n        }\r\n        if(currentBoid.position.z <= -depth + border || currentBoid.position.z >= depth - border) {\r\n            currentBoid.position.z -= currentBoid.velocity.z;\r\n            currentBoid.position.z = Math.max(currentBoid.position.z, -depth + border);\r\n            currentBoid.position.z = Math.min(currentBoid.position.z,  depth - border);\r\n            currentBoid.velocity.z = -currentBoid.velocity.z;\r\n            currentBoid.position.z += currentBoid.velocity.z;\r\n        }\r\n    }\r\n        \r\n    Boid.prototype.distance = function(boid, currentBoid) {\r\n        var distX = currentBoid.position.x - boid.position.x;\r\n        var distY = currentBoid.position.y - boid.position.y;\r\n        var distZ = currentBoid.position.z - boid.position.z;\r\n        return Math.sqrt(distX * distX + distY * distY + distZ * distZ);\r\n    }\r\n        \r\n    Boid.prototype.moveAway = function(boids, currentBoid, minDistance) {\r\n        var distanceX = 0;\r\n        var distanceY = 0;\r\n        var distanceZ = 0;\r\n        var numClose = 0;\r\n\r\n        for(var i = 0; i < boids.length; i++) {\r\n            var boid = boids[i];\r\n            \r\n            if(boid.position.x == currentBoid.position.x && boid.position.y == currentBoid.position.y && boid.position.z == currentBoid.position.z) continue;\r\n            \r\n            var distance = this.distance(boid, currentBoid);\r\n            if(distance < minDistance) {\r\n                numClose++;\r\n                var xdiff = (currentBoid.position.x - boid.position.x);\r\n                var ydiff = (currentBoid.position.y - boid.position.y);\r\n                var zdiff = (currentBoid.position.z - boid.position.z);\r\n\r\n                if(xdiff >= 0) xdiff = Math.sqrt(minDistance) - xdiff;\r\n                else if(xdiff < 0) xdiff = -Math.sqrt(minDistance) - xdiff;\r\n\r\n                if(ydiff >= 0) ydiff = Math.sqrt(minDistance) - ydiff;\r\n                else if(ydiff < 0) ydiff = -Math.sqrt(minDistance) - ydiff;\r\n\r\n                if(zdiff >= 0) zdiff = Math.sqrt(minDistance) - zdiff;\r\n                else if(zdiff < 0) zdiff = -Math.sqrt(minDistance) - zdiff;\r\n\r\n                distanceX += xdiff;\r\n                distanceY += ydiff;\r\n                distanceZ += zdiff;\r\n                boid = null; \r\n            }\r\n        }\r\n        \r\n        if(numClose == 0) return;\r\n        \r\n        currentBoid.velocity.x -= distanceX / 5;\r\n        currentBoid.velocity.y -= distanceY / 5;\r\n        currentBoid.velocity.z -= distanceZ / 5;\r\n    }\r\n        \r\n    Boid.prototype.moveCloser = function(boids, currentBoid, distance) {\r\n        if(boids.length < 1) return             \r\n\r\n        var avgX = 0;\r\n        var avgY = 0;\r\n        var avgZ = 0;\r\n        var maxVelocity = 3;\r\n\r\n        for(var i = 0; i < boids.length; i++) {\r\n            var boid = boids[i];\r\n            if(boid.position.x == currentBoid.position.x && boid.position.y == currentBoid.position.y && boid.position.z == currentBoid.position.z) continue;\r\n            if(this.distance(boid, currentBoid) > distance) continue;\r\n            \r\n            avgX += (currentBoid.position.x - boid.position.x);\r\n            avgY += (currentBoid.position.y - boid.position.y);\r\n            avgZ += (currentBoid.position.z - boid.position.z);\r\n            boid = null;\r\n        }\r\n            \r\n\r\n        avgX /= boids.length;\r\n        avgY /= boids.length;\r\n        avgZ /= boids.length;\r\n\r\n        distance = Math.sqrt((avgX * avgX) + (avgY * avgY) + (avgZ * avgZ)) * -1.0;\r\n        if(distance == 0) return;\r\n        \r\n        currentBoid.velocity.x = Math.min(currentBoid.velocity.x + (avgX / distance) * 0.15, maxVelocity);\r\n        currentBoid.velocity.y = Math.min(currentBoid.velocity.y + (avgY / distance) * 0.15, maxVelocity);\r\n        currentBoid.velocity.z = Math.min(currentBoid.velocity.z + (avgZ / distance) * 0.15, maxVelocity);\r\n    }\r\n        \r\n    Boid.prototype.moveWith = function(boids, currentBoid, distance) {\r\n        if(boids.length < 1) return\r\n\r\n        // calculate the average velocity of the other boids\r\n        var avgX = 0;\r\n        var avgY = 0;\r\n        var avgZ = 0;\r\n        var maxVelocity = 5;\r\n\r\n        for(var i = 0; i < boids.length; i++) {\r\n            var boid = boids[i];\r\n            if(boid.position.x == currentBoid.position.x && boid.position.y == currentBoid.position.y && boid.position.z == currentBoid.position.z) continue;\r\n            if(this.distance(boid, currentBoid) > distance) continue;\r\n            \r\n            avgX += boid.velocity.x;\r\n            avgY += boid.velocity.y;\r\n            avgZ += boid.velocity.z;\r\n            boid = null;\r\n        }\r\n        avgX /= boids.length;\r\n        avgY /= boids.length;\r\n        avgZ /= boids.length;\r\n\r\n        distance = Math.sqrt((avgX * avgX) + (avgY * avgY) + (avgZ * avgZ)) * 1.0;\r\n        if(distance == 0) return;\r\n\r\n        currentBoid.velocity.x = Math.min(currentBoid.velocity.x + (avgX / distance) * 0.05, maxVelocity);\r\n        currentBoid.velocity.y = Math.min(currentBoid.velocity.y + (avgY / distance) * 0.05, maxVelocity); \r\n        currentBoid.velocity.z = Math.min(currentBoid.velocity.z + (avgZ / distance) * 0.05, maxVelocity);                     \r\n    }\r\n\r\n    Boid.prototype.fleeMouse = function(mouseVector, currentBoid) {\r\n        \r\n        var distanceX = 0;\r\n        var distanceY = 0;\r\n        var numClose = 0;\r\n\r\n        //if(mouseVector.position.x == currentBoid.position.x && mouseVector.position.y == currentBoid.position.y) continue;\r\n        \r\n        var distance = 5;\r\n        var minDistance = 10/*this.distance(mouseVector, currentBoid)*/;\r\n        \r\n        if(distance < minDistance) {\r\n            numClose++;\r\n            var xdiff = (currentBoid.position.x - mouseVector.x);\r\n            var ydiff = (currentBoid.position.y - mouseVector.y);\r\n\r\n            if(xdiff >= 0) xdiff = Math.sqrt(minDistance) - xdiff;\r\n            else if(xdiff < 0) xdiff = -Math.sqrt(minDistance) - xdiff;\r\n\r\n            if(ydiff >= 0) ydiff = Math.sqrt(minDistance) - ydiff;\r\n            else if(ydiff < 0) ydiff = -Math.sqrt(minDistance) - ydiff;\r\n\r\n            distanceX += xdiff;\r\n            distanceY += ydiff;\r\n            mouseVector = null; \r\n        }\r\n        \r\n        if(numClose == 0) return;\r\n        \r\n        currentBoid.velocity.x -= distanceX / 5;\r\n        currentBoid.velocity.y -= distanceY / 5;\r\n    }\r\n\r\n    var random = function(maxNum) {\r\n        return Math.ceil(Math.random() * maxNum);\r\n    }\r\n\r\n    return Boid;\r\n})();\r\n\r\n\r\n","var Fish = (function(){\n\n    function Fish(){\n        THREE.Object3D.call(this);\n\n        // White Eye\n        var geometryWhiteEye = new THREE.CylinderGeometry(10, 10, 35, 32); \n        var materialWhiteEye = new THREE.MeshPhongMaterial({\n            ambient: 0x000000, \n            color: 0xFFFFFF, \n            specular: 0xFFFFFF, \n            shininess: 30, \n            shading: THREE.FlatShading\n        });\n        this.whiteEye = new THREE.Mesh(geometryWhiteEye, materialWhiteEye); \n        this.whiteEye.position.set(40, 10, 5);\n        this.whiteEye.rotation.set(1.58, 0, 0);\n        this.add(this.whiteEye);\n\n        // Black Eye\n        var geometryBlackEye = new THREE.CylinderGeometry(5, 5, 37, 32); \n        var materialBlackEye = new THREE.MeshPhongMaterial({\n            ambient: 0x000000, \n            color: 0x000000, \n            specular: 0x000000, \n            shininess: 30, \n            shading: THREE.FlatShading\n        });\n        this.blackEye = new THREE.Mesh(geometryBlackEye, materialBlackEye); \n        this.blackEye.position.set(37, 11, 5);\n        this.blackEye.rotation.set(1.58, 0, 0);\n        this.add(this.blackEye);\n\n        // Fish Corps\n        var extrudeSettings = { \n            amount: 10,\n            curveSegments: 100,\n            bevelEnabled: false,\n            bevelThickness: 10,\n            bevelSegments: 20,\n            steps: 2\n        };\n\n\t\tvar x = y = 0;\n        var fishShape = new THREE.Shape();\n\n\t\tfishShape.moveTo(x,y);\n\t\tfishShape.quadraticCurveTo(x + 50, y - 50, x + 110, y - 10);\n\t\tfishShape.quadraticCurveTo(x + 100, y - 10, x + 150, y - 30);\n\t\tfishShape.quadraticCurveTo(x + 115, y, x + 150, y + 50);\n\t\tfishShape.quadraticCurveTo(x + 100, y + 10, x + 110, y + 50);\n\t\tfishShape.quadraticCurveTo(x + 50, y + 50, x, y);\n\n\t\tvar geometryCorps = new THREE.ExtrudeGeometry(fishShape, extrudeSettings); \n\t\tvar materialCorps = new THREE.MeshPhongMaterial({\n            ambient: 0x000000, \n            color: 0xCBBEB5, \n            specular: 0xAAAAAA, \n            shininess: 5, \n            shading: THREE.FlatShading\n        });\n\n\t    this.corps = new THREE.Mesh(geometryCorps, materialCorps);\n\t    this.corps.position.set(0, 0, 0);\n\t    this.add(this.corps);\n\n\t    this.scale.set(0.3, 0.3, 0.3);\n\n\t\t//addShape( fishShape, extrudeSettings, 0x3facc8, -60, 200, 0, 0, 0, 0, 1 );\n    }\n\n    Fish.prototype = new THREE.Object3D;\n    Fish.prototype.constructor = Fish;\n\n    Fish.prototype.update = function() {\n\n        var time = Date.now() / 2000;\n        var phase = 0;\n        //this.rotation.y = Math.sin(time) * 0.05;\n\n        TweenMax.to(this.rotation, 0.3, {y: (Math.atan2(-this.velocity.z, -this.velocity.x)), z: (-Math.asin(this.velocity.y / this.velocity.length()) * 0.2), ease:Linear.easeNone});\n        //this.rotation.y = Math.atan2(-this.velocity.z, -this.velocity.x);\n        //this.rotation.z = -Math.asin(this.velocity.y / this.velocity.length()) * 0.2;\n\n    \t//this.rotation.y -= 0.01;\n        //if(this.position.x > 0)\n    \t//this.position.x -= 5;\n\n        /*\n        this.velocity = new THREE.Vector3(-Math.random(), 0, 0);\n        this.velocity.x -= Math.random() * 0.1;\n*/      \n    };\n\n    return Fish;\n})();\n\n","var Grass = (function(){\r\n\r\n    function Grass(width, height){\r\n        THREE.Object3D.call(this);\r\n\r\n        var geometry = new THREE.BoxGeometry(1.5, 20, 1.5);\r\n        var materials = [\r\n            new THREE.MeshPhongMaterial({\r\n                ambient: 0x000000, \r\n                color: 0x00FF3E,\r\n                specular: 0x555555,\r\n                shininess: 30, \r\n                shading: THREE.FlatShading\r\n            }), \r\n            new THREE.MeshPhongMaterial({\r\n                ambient: 0x000000, \r\n                color: 0x00997C, \r\n                specular: 0x555555,\r\n                shininess: 30, \r\n                shading: THREE.FlatShading\r\n            }),\r\n            new THREE.MeshPhongMaterial({\r\n                ambient: 0x000000, \r\n                color: 0x00CCA5, \r\n                specular: 0x555555,\r\n                shininess: 30, \r\n                shading: THREE.FlatShading\r\n            })\r\n        ];\r\n\r\n        for (var i = 0; i < 10000 ; i++) {\r\n\r\n            //var random = Math.floor(Math.random() * 3) + 0;\r\n\r\n            this.mesh = new THREE.Mesh(geometry, materials[i%3]);\r\n            this.mesh.position.x = (-width/2) + Math.random() * width;\r\n            this.mesh.position.y = -120/*(-height/2) + Math.random() * (height/2.5)*/;\r\n            this.mesh.position.z = (-250) + Math.random() * 500;\r\n            this.mesh.rotation.x = (Math.random() * 0.3) + 9.5;\r\n            this.mesh.scale.y = Math.random() * 1.8 + 0.2;\r\n            //this.mesh.rotation.y = Math.random() + 10;\r\n            //this.mesh.material.color.setHex(colors[i%3]);\r\n            this.add(this.mesh);\r\n        };\r\n        \r\n    }\r\n\r\n    Grass.prototype = new THREE.Object3D;\r\n    Grass.prototype.constructor = Grass;\r\n\r\n    Grass.prototype.update = function() {\r\n\r\n        var time = Date.now() / 3000;\r\n\r\n        for (var i = 0, l = this.children.length ; i < l ; i ++) {\r\n            var mesh = this.children[i];\r\n            mesh.rotation.x = (Math.sin(time * 4) * 0.1) + 9.6;\r\n            //mesh.rotation.y = (Math.sin(time * 4)) + 50;\r\n        }\r\n    };\r\n\r\n    return Grass;\r\n})();","var Plane = (function(){\r\n\r\n    function Plane(){\r\n        THREE.Object3D.call(this);\r\n\r\n        var geometry = new THREE.PlaneGeometry(2000, 600);\r\n        var material = new THREE.MeshPhongMaterial({\r\n            ambient: 0x000000, \r\n            color: 0x002654, \r\n            specular: 0x444444, \r\n            shininess: 5, \r\n            shading: THREE.FlatShading\r\n        });\r\n\r\n        this.mesh = new THREE.Mesh(geometry, material);\r\n        this.mesh.position.set(0, 150, -300);\r\n        this.add(this.mesh);\r\n    }\r\n\r\n    Plane.prototype = new THREE.Object3D;\r\n    Plane.prototype.constructor = Plane;\r\n\r\n    Plane.prototype.update = function() {\r\n\r\n    };\r\n\r\n    return Plane;\r\n})();","var Plant = (function(){\r\n\r\n    function Plant(width, height){\r\n        THREE.Object3D.call(this);\r\n\r\n        // Random\r\n        var randomPoints = [];\r\n        var size = (Math.random()*3) + 4;\r\n\r\n        for ( var i = 0; i < size; i ++ ) {\r\n            randomPoints.push(new THREE.Vector3((i - 4.5) * 50, THREE.Math.randFloat(-20, 20), THREE.Math.randFloat(5, 10)));\r\n        }\r\n\r\n        var randomSpline =  new THREE.SplineCurve3(randomPoints);\r\n        \r\n        // Plant\r\n        var extrudeSettings = {\r\n            steps           : 200,\r\n            bevelEnabled    : false,\r\n            extrudePath     : randomSpline\r\n        };\r\n\r\n        var pts = [], numPts = 2;\r\n\r\n        for (var i = 0 ; i < numPts * 2 ; i++) {\r\n            var l = i % 2 == 1 ? 5 : 10;\r\n            var a = i / numPts * Math.PI;\r\n            pts.push(new THREE.Vector2(Math.cos(a) * l, Math.sin(a) * l));\r\n        }\r\n\r\n        var shape = new THREE.Shape(pts);\r\n        var geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);\r\n        var material = new THREE.MeshPhongMaterial({\r\n            ambient: 0x000000, \r\n            color: 0x00CCA5, \r\n            specular: 0xFFFFFF, \r\n            shininess: 5, \r\n            shading: THREE.FlatShading\r\n        });\r\n        \r\n        this.mesh = new THREE.Mesh(geometry, material);\r\n        this.mesh.rotation.set(0, 0, 1.58);\r\n\r\n        this.add(this.mesh);\r\n    }\r\n\r\n    Plant.prototype = new THREE.Object3D;\r\n    Plant.prototype.constructor = Plant;\r\n\r\n    Plant.prototype.update = function() {\r\n        /*this.mesh.rotation.x += 0.01;\r\n        this.mesh.rotation.y += 0.01;*/\r\n    };\r\n\r\n    return Plant;\r\n})();","var Shark = (function(){\n\n    function Shark(){\n        THREE.Object3D.call(this);\n\n        // White Eye\n        var geometryWhiteEye = new THREE.BoxGeometry(35, 35, 10); \n        var materialWhiteEye = new THREE.MeshPhongMaterial({\n            ambient: 0x000000, \n            color: 0xFFFFFF, \n            specular: 0xFFFFFF, \n            shininess: 30, \n            shading: THREE.FlatShading\n        });\n        this.whiteEye = new THREE.Mesh(geometryWhiteEye, materialWhiteEye); \n        this.whiteEye.position.set(40, 14, 5);\n        this.whiteEye.rotation.set(1.58, 0, 0);\n        this.add(this.whiteEye);\n\n        // Black Eye\n        var geometryBlackEye = new THREE.CylinderGeometry(4, 4, 37, 32); \n        var materialBlackEye = new THREE.MeshPhongMaterial({\n            ambient: 0x000000, \n            color: 0x000000, \n            specular: 0x000000, \n            shininess: 30, \n            shading: THREE.FlatShading\n        });\n        this.blackEye = new THREE.Mesh(geometryBlackEye, materialBlackEye); \n        this.blackEye.position.set(45, 14, 5);\n        this.blackEye.rotation.set(1.58, 0, 0);\n        this.add(this.blackEye);\n\n        // Shark Corps\n        var extrudeSettings = { \n            amount: 10,\n            curveSegments: 100,\n            bevelEnabled: false,\n            bevelThickness: 10,\n            bevelSegments: 20,\n            steps: 2\n        };\n\n\t\tvar x = y = 0;\n        var sharkShape = new THREE.Shape();\n\n\t\tsharkShape.moveTo(x,y);\n\t\tsharkShape.quadraticCurveTo(x + 100, y - 40, x + 100, y - 10);\n\t\tsharkShape.quadraticCurveTo(x + 100, y - 10, x + 170, y - 60);\n\t\tsharkShape.quadraticCurveTo(x + 115, y, x + 150, y + 60);\n\t\tsharkShape.quadraticCurveTo(x + 100, y + 10, x + 110, y + 80);\n\t\tsharkShape.quadraticCurveTo(x + 50, y + 30, x-50, y);\n\n\t\tvar geometryCorps = new THREE.ExtrudeGeometry(sharkShape, extrudeSettings); \n\t\tvar materialCorps = new THREE.MeshPhongMaterial({\n            ambient: 0x000000, \n            color: 0x555555, \n            specular: 0xAAAAAA, \n            shininess: 30, \n            shading: THREE.FlatShading\n        });\n\n\t    this.corps = new THREE.Mesh(geometryCorps, materialCorps);\n\t    this.corps.position.set(0, 0, 0);\n\t    this.add(this.corps);\n\n        this.scale.set(2, 2, 2);\n\n\t\t//addShape( sharkShape, extrudeSettings, 0x3facc8, -60, 200, 0, 0, 0, 0, 1 );\n    }\n\n    Shark.prototype = new THREE.Object3D;\n    Shark.prototype.constructor = Shark;\n\n    Shark.prototype.update = function() {\n\n        var time = Date.now() / 150;\n\n        this.rotation.y = Math.sin(time) * 0.05;\n\n            var move = Math.sin(Date.now() / 2000);\n            var change = true;\n\n            this.position.x -= 20;\n/*\n            if(move < 0 && change) {\n                this.rotation.y = 0;\n                change = false;\n            }\n            else {\n                this.rotation.y = 3 * Math.sin(Date.now() / 1500);\n                change = true;\n            }*/\n\n    \t//this.rotation.y -= 0.01;\n        //if(this.position.x > 0)\n    \t//this.position.x -= 5;\n\n        /*\n        this.velocity = new THREE.Vector3(-Math.random(), 0, 0);\n        this.velocity.x -= Math.random() * 0.1;\n*/      \n    };\n\n    return Shark;\n})();","var Skybox = (function(){\r\n\r\n    function Skybox(){\r\n        THREE.Object3D.call(this);\r\n\r\n        var r = \"src/img/\";\r\n        var urls = [r + \"whirlpool_py.jpg\", r + \"whirlpool_py.jpg\",\r\n                    r + \"whirlpool_py.jpg\", r + \"whirlpool_ny.jpg\",\r\n                    r + \"whirlpool_py.jpg\", r + \"whirlpool_py.jpg\"];\r\n\r\n        var textureCube = THREE.ImageUtils.loadTextureCube( urls );\r\n        textureCube.format = THREE.RGBFormat;\r\n\r\n        // Skybox\r\n\r\n        var shader = THREE.ShaderLib[ \"cube\" ];\r\n        shader.uniforms[ \"tCube\" ].value = textureCube;\r\n\r\n        var geometry = new THREE.BoxGeometry(100, 100, 100);\r\n        var material = new THREE.ShaderMaterial( {\r\n\r\n            fragmentShader: shader.fragmentShader,\r\n            vertexShader: shader.vertexShader,\r\n            uniforms: shader.uniforms,\r\n            depthWrite: false,\r\n            side: THREE.BackSide\r\n\r\n        } );\r\n\r\n        this.mesh = new THREE.Mesh(geometry, material);\r\n        //this.mesh.scale.set(10, 10, 10);\r\n\r\n\t\tthis.add(this.mesh);\r\n    }\r\n\r\n    Skybox.prototype = new THREE.Object3D;\r\n    Skybox.prototype.constructor = Skybox;\r\n\r\n    Skybox.prototype.update = function() {\r\n        \r\n    };\r\n\r\n    return Skybox;\r\n})();","var Sound = (function(){\n\n    function Sound(){\n\n        myAudio = new Audio('src/audio/PlongeeNocturne.mp3'); \n\t\tmyAudio.addEventListener('ended', function() {\n\t\t    this.currentTime = 0;\n\t\t    this.play();\n\t\t}, false);\n\t\tmyAudio.play();\n    }\n\n    Sound.prototype.constructor = Sound;\n\n    return Sound;\n})();","var Sphere = (function(){\n\n    function Sphere(){\n        THREE.Object3D.call(this);\n\n        var geometry = new THREE.SphereGeometry(35);\n        var material = new THREE.MeshPhongMaterial({\n            ambient: 0x000000, \n            color: 0x00C0C0, \n            specular: 0xAAAAAA, \n            shininess: 30, \n            shading: THREE.FlatShading\n        });\n\n        this.mesh = new THREE.Mesh(geometry, material);\n        this.add(this.mesh);\n    }\n\n    Sphere.prototype = new THREE.Object3D;\n    Sphere.prototype.constructor = Sphere;\n\n    Sphere.prototype.update = function() {\n        this.mesh.rotation.x += 0.01;\n        this.mesh.rotation.y += 0.01;\n    };\n\n    return Sphere;\n})();"],"sourceRoot":"/source/"}